'use strict';

// Синтаксис створення нового числа
const num = new Function(3);
console.log(num);

//Якщо така функція міститиме методи і властивості, то вона створить новий обєкт

// Функція стає конструктором, з його допомогою можна створювати нових користувачів:  
function User(name, id) {
    this.name = name; //для кожного окремого
    this.age = id;
    this.humen = true;
    this.hello = function () {
        console.log(`Hello ${this.name}. You are ${this.age} years old.`)
    }
}

//Добавляння нової властивості, яка запашеться у обєет. Даний метод запишеться у функцію конструктор. Це в разі, якщо немає прямого доступу до редагування об'єкта.
User.prototype.exit = function(name) {
    console.log(`Користувач ${this.name} вийшов`);
};

// При такому записі створюється новий обєкт з властивостями, записаними в функції-конструкторі
const ivan = new User('Ivan', 28);
const alex = new User ('Alex', 20);

ivan.exit();
ivan.hello();
alex.hello();

console.log(ivan);
console.log(alex);


//Отже, конструктори потрібні для створення нових, однотипних об'єктів. На практиці це можуть бути: нові користувачі сайту, товари в магазині, компоненти сайтів -- всюди, де є шаблонізація.

//Н-ад, у нас є різні слайдери на одній сторінці. Відповідно, параметри можна задавати як аргументи конструктора, і потім конструювати слайдер, у якого будуть однакові властивості. Тобто, один раз прописуємо прототип, а потім налаштовуємо індивідуальні особливості. 

//Це все відносилося до стандарту ES5. В ES6 зявилися класи. Це (синтаксичний цукор), тобто красива обгортка функціоналу конструктора. Класи зручніше використовувати. 